AWSTemplateFormatVersion: 2010-09-09
Description: Creating ECS Cluster
Parameters:
  VPC: 
    Description: Name of an existing VPC for the EC2 instance
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be a valid name
  
  Subnet1:
    Type: String
    Description: Id if subnet  

  Subnet2:
    Type: String
    Description: id of subnet 

  ClusterName:
    Type: String
    Description: Unique name of the cluster

  TG:
    Type: String
    Description: Name of the target group for the Apllication LoadBalancer

  ImageUrl:
    Type: String
    Description: The url of a docker image that contains the application  
  
  # Svc:
  #   Type: String
  #   Description: Enter Service Name 

  BuildNumber:
    Type: String
    Description: Enter Value of ENV Variable 

  
  


Resources:

  Taskdefinition: 
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: 'jenkin-ecs-task'
      Cpu: '256'
      Memory: '512'
      NetworkMode: 'bridge'
      ContainerDefinitions:
        - Name:  'php-apache'
          Image: !Ref 'ImageUrl' #improved 
          #Image: '020046395185.dkr.ecr.us-east-1.amazonaws.com/php-apache-image:latest'
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: 'tcp'
          MemoryReservation: 128
          #Environment:
          # Command: [--BUILD,!Ref BuildNumber]



      
  ServiceA:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListenerRule
    Properties:
      ServiceName: 'app-svc'
      Cluster: !Ref ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      TaskDefinition: !Ref 'Taskdefinition'
      HealthCheckGracePeriodSeconds: 60
      LaunchType: 'EC2'
      LoadBalancers:
        - ContainerName: 'php-apache'
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroup'




  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: 
        - !Ref 'Subnet1'
        - !Ref 'Subnet2'
      SecurityGroups:
        - !Ref LoadBalancerSG

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref TG #problem
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup



  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: ["*"]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1







    
  ecsServiceRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'
